// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/eugenshima/profile/internal/model"

	uuid "github.com/google/uuid"
)

// ProfileService is an autogenerated mock type for the ProfileService type
type ProfileService struct {
	mock.Mock
}

// CreateNewProfile provides a mock function with given fields: ctx, profile
func (_m *ProfileService) CreateNewProfile(ctx context.Context, profile *model.Profile) error {
	ret := _m.Called(ctx, profile)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Profile) error); ok {
		r0 = rf(ctx, profile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProfileByID provides a mock function with given fields: ctx, id
func (_m *ProfileService) GetProfileByID(ctx context.Context, id uuid.UUID) (*model.Profile, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Profile
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Profile); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Profile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, loginPass
func (_m *ProfileService) Login(ctx context.Context, loginPass *model.Auth) (uuid.UUID, error) {
	ret := _m.Called(ctx, loginPass)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(context.Context, *model.Auth) uuid.UUID); ok {
		r0 = rf(ctx, loginPass)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.Auth) error); ok {
		r1 = rf(ctx, loginPass)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProfile provides a mock function with given fields: ctx, profile
func (_m *ProfileService) UpdateProfile(ctx context.Context, profile *model.Profile) error {
	ret := _m.Called(ctx, profile)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Profile) error); ok {
		r0 = rf(ctx, profile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewProfileService interface {
	mock.TestingT
	Cleanup(func())
}

// NewProfileService creates a new instance of ProfileService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProfileService(t mockConstructorTestingTNewProfileService) *ProfileService {
	mock := &ProfileService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
